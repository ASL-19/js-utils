// eslint-disable-next-line no-console
const originalConsoleLog = console.log;
const originalConsoleInfo = console.info;
const originalConsoleWarn = console.warn;
const originalConsoleError = console.error;

const datePartsRegExp =
  /(?<date>\d\d\d\d-\d\d-\d\d)T(?<hoursMinutesSeconds>\d\d:\d\d:\d\d)/;

/**
 * Matches strings that start with a date stamp like "[2025-01-01 01:23:45"
 *
 * (Note the lack of trailing square bracket since serverLog can include URL
 * path after the timestamp but before the closing square bracket).
 */
const startsWithDateStampRegExp = /^\[\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d/;

const getFormattedCurrentDateTimePrefix = () => {
  const date = new Date();

  const datePartsMatch = datePartsRegExp.exec(date.toISOString());

  return datePartsMatch &&
    typeof datePartsMatch.groups === "object" &&
    typeof datePartsMatch.groups.date === "string" &&
    typeof datePartsMatch.groups.hoursMinutesSeconds === "string"
    ? `[${datePartsMatch.groups.date} ${datePartsMatch.groups.hoursMinutesSeconds}]`
    : "[????-??-?? ??:??:??]"; // This shouldn't ever happen!
};

/**
 * TypeScript verification that the regex pattern matches the timestamp format.
 * This ensures that startsWithDateStampRegExp will correctly identify timestamps
 * generated by both addTimestampsToConsoleMethods and serverLog.
 */

// Runtime verification that the regex matches the actual format
const _testTimestampFormat = getFormattedCurrentDateTimePrefix();
if (!startsWithDateStampRegExp.test(_testTimestampFormat)) {
  throw new Error(
    "startsWithDateStampRegExp does not match the date format produced by getFormattedCurrentDateTimePrefix/serverLog",
  );
}

/**
 * @param {{
 *  args: Array<any>;
 *  consoleMethod: typeof console.log }
 * } params}
 * @returns void
 */
const callConsoleMethodWithTimestampPrefixIfNotAlreadyTimestamped = ({
  args,
  consoleMethod,
}: {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  args: Array<any>;
  consoleMethod: typeof console.log;
}) => {
  if (typeof args[0] === "string" && startsWithDateStampRegExp.test(args[0])) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    consoleMethod(...args);
  } else {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    consoleMethod(getFormattedCurrentDateTimePrefix(), ...args);
  }
};

/**
 *
 * Add timestamps to console.log, console.info, console.warn, and console.error
 * messages.
 *
 * If a message already starts with a timestamp (in the format added by this
 * function), another timestamp will not be added.
 * @public
 */
const addTimestampsToConsoleMethods = () => {
  // eslint-disable-next-line no-console
  console.log = (...args) =>
    callConsoleMethodWithTimestampPrefixIfNotAlreadyTimestamped({
      args,
      consoleMethod: originalConsoleLog,
    });
  console.info = (...args) =>
    callConsoleMethodWithTimestampPrefixIfNotAlreadyTimestamped({
      args,
      consoleMethod: originalConsoleInfo,
    });
  console.warn = (...args) =>
    callConsoleMethodWithTimestampPrefixIfNotAlreadyTimestamped({
      args,
      consoleMethod: originalConsoleWarn,
    });
  console.error = (...args) =>
    callConsoleMethodWithTimestampPrefixIfNotAlreadyTimestamped({
      args,
      consoleMethod: originalConsoleError,
    });
};

export default addTimestampsToConsoleMethods;
