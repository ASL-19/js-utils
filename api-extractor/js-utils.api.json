{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.36.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@asl-19/js-utils!",
  "docComment": "/**\n * A collection of plain JavaScript utility functions for ASL19 projects.\n *\n * These functions donâ€™t rely on DOM, React, or React Native APIs.\n *\n * @packageDocumentation\n */\n",
  "name": "@asl-19/js-utils",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@asl-19/js-utils!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!asType:var",
          "docComment": "/**\n * Cast an object to a specified data type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "asType: "
            },
            {
              "kind": "Content",
              "text": "<T>(value: T) => T"
            }
          ],
          "fileUrlPath": "src/asType.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "asType",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!cleanUrlQueryString:var",
          "docComment": "/**\n * Returns a URL with trailing `\"?\"` and `\"&\"` characters removed.\n *\n * @param url - URL\n *\n * @example\n * ```ts\n * cleanUrlQueryString(\"/foo?\")\n * // \"/foo\"\n *\n * cleanUrlQueryString(\"/foo?bar&\")\n * // \"/foo?bar\"\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "cleanUrlQueryString: "
            },
            {
              "kind": "Content",
              "text": "(url: string) => string"
            }
          ],
          "fileUrlPath": "src/cleanUrlQueryString.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "cleanUrlQueryString",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!constructUrl:var",
          "docComment": "/**\n * Format a root-relative URL based on provided path and query string key-value pairs.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "constructUrl: "
            },
            {
              "kind": "Content",
              "text": "({ path, querySegments, }: {\n    path: string;\n    querySegments?: {\n        [key: string]: string | number | null | undefined;\n    } | undefined;\n}) => string"
            }
          ],
          "fileUrlPath": "src/constructUrl.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "constructUrl",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!getAbsoluteUrl:var",
          "docComment": "/**\n * Given provided protocol + host string and root-relative URL string returns an absolute (fully-qualified) URL.\n *\n * @remarks\n *\n * - `protocolAndHost` should look like `\"https://asl19.org\"`, with no trailing slash. In ASL19 Next.js projects this is probably `process.env.NEXT_PUBLIC_WEB_URL`. - `rootRelativeUrl` should start with `\"/\"`.\n *\n * @example\n * ```ts\n * getAbsoluteUrl({\n *  protocolAndHost: \"https://hello.com\",\n *  rootRelativeUrl: \"/foo\",\n * })\n * // \"https://hello.com/foo\"\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getAbsoluteUrl: "
            },
            {
              "kind": "Content",
              "text": "({ protocolAndHost, rootRelativeUrl, }: {\n    protocolAndHost: string;\n    rootRelativeUrl: string;\n}) => string"
            }
          ],
          "fileUrlPath": "src/getAbsoluteUrl.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getAbsoluteUrl",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!getFirstStringOrString:var",
          "docComment": "/**\n * Given an array or a string, return its first string element.\n *\n * @remarks\n *\n * This is useful for normalizing Next.js `router.query` (`ParsedUrlQuery`) values, which can be either a string or an array of strings.\n *\n * If possible you should use {@link getNormalizedQuery} (which uses this function internally) for this, but there may be special cases where it makes sense to use this function directly.\n *\n * @example\n * ```ts\n * getFirstStringOrString([\"foo1\",\"foo2\"])\n * // \"foo1\"\n *\n * getFirstStringOrString(\"foo1\")\n * // \"foo1\"\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getFirstStringOrString: "
            },
            {
              "kind": "Content",
              "text": "(arrayOrString?: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<string> | string) => string | undefined"
            }
          ],
          "fileUrlPath": "src/getFirstStringOrString.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getFirstStringOrString",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!getNormalizedQuery:var",
          "docComment": "/**\n * Returns a normalized representation of the passed query with default values.\n *\n * @remarks\n *\n * Query values are converted to number if the corresponding default value is a number; otherwise they will be typed string.\n *\n * 1. Itâ€™s important to normalize the query before use because the ParsedUrlQuery exposed by Next.js in getServerSideProps and useRouter().query can be an array if multiple query string parameters with the same key are in the URL. e.g.:\n *\n * - `?rating=true` â†’ `{rating: \"true\"}`; - `?rating=true&rating=false` â†’ `{rating: [\"true\", false\"]}`\n *\n * This is easy to forget, but could cause runtime errors.\n *\n * 2. In the future the aforementioned defaults-driven auto-conversion may also support arrays of strings and arrays of numbers to support use cases like law_database_webâ€™s multi-tag select).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getNormalizedQuery: "
            },
            {
              "kind": "Content",
              "text": "<NormalizedQueryType>({ defaults, query, types, }: {\n    defaults: NormalizedQueryType;\n    query: "
            },
            {
              "kind": "Reference",
              "text": "ParsedUrlQuery",
              "canonicalReference": "!\"\\\"querystring\\\"\".ParsedUrlQuery:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    types: { [queryParameterName in keyof NormalizedQueryType]: "
            },
            {
              "kind": "Reference",
              "text": "NonNullable",
              "canonicalReference": "!NonNullable:type"
            },
            {
              "kind": "Content",
              "text": "<NormalizedQueryType[queryParameterName]> extends number ? \"number\" : \"string\"; };\n}) => NormalizedQueryType"
            }
          ],
          "fileUrlPath": "src/getNormalizedQuery.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getNormalizedQuery",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!getObjectValueByDotSeparatedKey:var",
          "docComment": "/**\n * Given a provided dot-separated key (e.g. `\"foo.bar\"`) and object extract the corresponding value.\n *\n * @example\n * ```ts\n *\n * const object = {\n *   foo: {\n *     bar: \"Hello\"\n *   }\n * };\n *\n * getObjectValueByDotSeparatedKey({\n *   dotSeparatedKey: \"foo.bar\",\n *   object,\n * })\n * // Hello\n *\n * getObjectValueByDotSeparatedKey({\n *   dotSeparatedKey: \"foo\",\n *   object,\n * })\n * // { bar: \"Hello\"}\n *\n * getObjectValueByDotSeparatedKey({\n *   dotSeparatedKey: \"abc\",\n *   object,\n * })\n * // undefined\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getObjectValueByDotSeparatedKey: "
            },
            {
              "kind": "Content",
              "text": "<Leaf>({ dotSeparatedKey, object, }: {\n    dotSeparatedKey: string;\n    object: "
            },
            {
              "kind": "Reference",
              "text": "Tree",
              "canonicalReference": "@asl-19/js-utils!~Tree:type"
            },
            {
              "kind": "Content",
              "text": "<Leaf>;\n}) => "
            },
            {
              "kind": "Reference",
              "text": "Tree",
              "canonicalReference": "@asl-19/js-utils!~Tree:type"
            },
            {
              "kind": "Content",
              "text": "<Leaf>"
            }
          ],
          "fileUrlPath": "src/getObjectValueByDotSeparatedKey.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getObjectValueByDotSeparatedKey",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!getRootRelativeUrl:var",
          "docComment": "/**\n * Given a fully-qualified URL, returns a root-relative URL.\n *\n * @example\n * ```ts\n * getRootRelativeUrl(\"https://asl19.org/\")\n * // \"/\"\n * getRootRelativeUrl(\"https://asl19.org/foo\")\n * // \"/foo\"\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "getRootRelativeUrl: "
            },
            {
              "kind": "Content",
              "text": "(fullyQualifiedUrl: string) => string"
            }
          ],
          "fileUrlPath": "src/getRootRelativeUrl.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "getRootRelativeUrl",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!isNullOrWhitespace:var",
          "docComment": "/**\n * Returns true if string is null, an empty string, or a string of whitespace characters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isNullOrWhitespace: "
            },
            {
              "kind": "Content",
              "text": "(input: string) => boolean"
            }
          ],
          "fileUrlPath": "src/isNullOrWhitespace.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isNullOrWhitespace",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!replaceArabicNumeralsWithPersianNumerals:var",
          "docComment": "/**\n * Replace Arabic (Hinduâ€“Arabic/Western Arabic/Latin) numerals with Persian (Perso-Arabic) numerals.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "replaceArabicNumeralsWithPersianNumerals: "
            },
            {
              "kind": "Content",
              "text": "(input: string) => string"
            }
          ],
          "fileUrlPath": "src/replaceArabicNumeralsWithPersianNumerals.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "replaceArabicNumeralsWithPersianNumerals",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!serverLog:var",
          "docComment": "/**\n * Logs a formatted message based on the provided description, HTTP status code, and path.\n *\n * @remarks\n *\n * Should only be used on the server â€” will output a warning and return early if called from the browser.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "serverLog: "
            },
            {
              "kind": "Content",
              "text": "({ description, path, statusCode, }: {\n    description?: string | undefined;\n    path?: string | undefined;\n    statusCode?: number | undefined;\n}) => void"
            }
          ],
          "fileUrlPath": "src/serverLog.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "serverLog",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/js-utils!underscoreCaseToCamelCase:var",
          "docComment": "/**\n * Given an underscore-cased string, returns a camel-cased string.\n *\n * @example\n * ```ts\n * - underscoreCaseToCamelCase(\"foo_bar\")\n * // \"fooBar\"\n * - underscoreCaseToCamelCase(\"foo\")\n * // \"foo\"\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "underscoreCaseToCamelCase: "
            },
            {
              "kind": "Content",
              "text": "(underscoreCasedString: string) => string"
            }
          ],
          "fileUrlPath": "src/underscoreCaseToCamelCase.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "underscoreCaseToCamelCase",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
